import mongoose from 'mongoose';

const messageSchema = new mongoose.Schema({
    senderId:{
        type: mongoose.Schema.Types.ObjectId,
        /*
        In Mongoose, mongoose.Schema.Types.ObjectId refers to a special type used to define a field in a schema as an ObjectId. 
        ObjectIds are a unique identifier for documents within a MongoDB collection and are generated by MongoDB. 
        They are used to uniquely identify documents and to create references between different documents in different collections.
        When used with the ref option, it establishes a relationship between documents in different collections, similar to foreign keys in relational databases.
        ObjectIds are commonly used to create references between documents in different collections. This is particularly useful for establishing relationships such as:

        One-to-Many: For example, a blog post might have many comments. The comments would store the ObjectId of the blog post they belong to.
        Many-to-Many: For example, users might participate in multiple conversations, and each conversation might have multiple users.
                */
        ref:'User', // This sender/reciever id will be an id from the user model/collection
        reuired:true
    },
    receiverId:{
        type: mongoose.Schema.Types.ObjectId,
        ref:'User',
        reuired:true
    },
    message:{
        type: String,
        required: true
    }
},{timestamps:true}) 
/*
The { timestamps: true } option in a Mongoose schema automatically adds createdAt and updatedAt fields to your schema. These fields are automatically managed by Mongoose to store the date and time when a document is created and last updated, respectively.
*/

const Message = mongoose.model('Message',messageSchema);

export default Message;

/*
Scenario
Imagine you have a messaging app. There are two main parts:

Users: People using the app.
Conversations: Chats between users.
Users
Each user has a unique ID, name, and other details.
Example: User1 (ID: 123) and User2 (ID: 456).
Conversations
Each conversation includes multiple users and messages.
Instead of storing all user details in the conversation, you store their unique IDs (references).
How It Works
Participants in a Conversation:

A conversation stores the unique IDs of the users involved. For example, a conversation might have participants with IDs 123 and 456, referring to User1 and User2.
Messages in a Conversation:

A conversation stores the unique IDs of the messages exchanged. Instead of storing the entire message content, it stores references to the messages.
*/